#cloud-config

manage_etc_hosts: localhost

write_files:
  - content: |
       [Global]
       auth-url=${os_api_url}
       tenant-name=${os_tenant_name}
       username=${os_username}
       password=${os_password}
       region=${os_region}
       [BlockStorage]
       ignore-volume-az=true
    path: /etc/kubernetes/openstack/cloud.conf
    permissions: '0600'

  - content: |
       [Service]
       Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
       Environment="KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true"
       Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
       Environment="KUBELET_DNS_ARGS=--cluster-dns=${dns-service-addr} --cluster-domain=cluster.local"
       Environment="KUBELET_AUTHZ_ARGS=--authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt"
       Environment="KUBELET_CERTIFICATE_ARGS=--rotate-certificates=true --cert-dir=/var/lib/kubelet/pki"
       Environment="KUBELET_CLOUD_ARGS=--cloud-provider=openstack --cloud-config=/etc/kubernetes/openstack/cloud.conf"
       Environment="KUBELET_LABEL_ARGS=--node-labels=node-role.kubernetes.io/worker="
       ExecStart=
       ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_CERTIFICATE_ARGS $KUBELET_CLOUD_ARGS $KUBELET_LABEL_ARGS $KUBELET_EXTRA_ARGS
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    permissions: '0644'

  - content: |
       systemctl daemon-reload
       systemctl restart kubelet
       kubeadm join --token {{kubernetes_jointoken_decript}} --discovery-token-unsafe-skip-ca-verification ${master-ip}:6443
    path: /usr/src/cloud/bootstrap.sh.j2

  - content: |
       {
         "apiVersion": "v1",
         "kind": "ServiceAccount",
         "metadata": {
           "name": "heketi-service-account"
         }
       }
    path: /root/heketi-service-account.json
    permissions: '0755'

  - content: |
       {
         "kind": "Namespace",
         "apiVersion": "v1",
         "metadata": {
           "name": "${heketi_namespace}",
           "labels": {
             "name": "${heketi_namespace}"
           }
         }
       }
    path: /root/heketi-namespace.json
    permissions: '0755'

  - content: |
     apiVersion: monitoring.coreos.com/v1
     kind: ServiceMonitor
     metadata:
       labels:
         app: heketi
         release: prom
       name: prom-prometheus-operator-prometheus
       namespace: heketi
     spec:
       endpoints:
       - interval: 30s
         port: heketi
       selector:
         matchLabels:
           name: heketi
       namespaceSelector:
         matchNames:
         - heketi
    path: /root/monitoring-heketi.json
    permissions: '0755'
  
  - content: |
       apiVersion: storage.k8s.io/v1beta1
       kind: StorageClass
       metadata:
         name: gluster-heketi
       provisioner: kubernetes.io/glusterfs
       parameters:
         resturl: "http://{{heketi_end_service_ip}}:8080"
         volumenameprefix: ${name}
         volumeoptions: "user.heketi.arbiter {{heketi_storageclass_arbiter}},user.heketi.average-file-size {{heketi_storageclass_arbiter_average_file_size}}"
    path: /usr/src/cloud/heketi-storageclasses.yaml.j2
    permissions: '0755'
  - content: |
       {
         "kind": "List",
         "apiVersion": "v1",
         "items": [
           {
             "kind": "Secret",
             "apiVersion": "v1",
             "metadata": {
               "name": "heketi-db-backup",
               "labels": {
                 "glusterfs": "heketi-db",
                 "heketi": "db"
               }
             },
             "data": {
             },
             "type": "Opaque"
           },
           {
             "kind": "Service",
             "apiVersion": "v1",
             "metadata": {
               "name": "heketi",
               "labels": {
                 "glusterfs": "heketi-service",
                 "deploy-heketi": "support"
               },
               "annotations": {
                 "description": "Exposes Heketi Service"
               }
             },
             "spec": {
               "selector": {
                 "name": "heketi"
               },
               "ports": [
                 {
                   "name": "heketi",
                   "port": 8080,
                   "targetPort": 8080
                 }
               ]
             }
           },
           {
             "kind": "Deployment",
             "apiVersion": "extensions/v1beta1",
             "metadata": {
               "name": "heketi",
               "labels": {
                 "glusterfs": "heketi-deployment"
               },
               "annotations": {
                 "description": "Defines how to deploy Heketi"
               }
             },
             "spec": {
               "replicas": 1,
               "template": {
                 "metadata": {
                   "name": "heketi",
                   "labels": {
                     "name": "heketi",
                     "glusterfs": "heketi-pod"
                   }
                 },
                 "spec": {
                   "serviceAccountName": "heketi-service-account",
                   "containers": [
                     {
                       "image": "heketi/heketi:${heketi_heketi_container_version}",
                       "imagePullPolicy": "Always",
                       "name": "heketi",
                       "env": [
                         {
                           "name": "HEKETI_EXECUTOR",
                           "value": "kubernetes"
                         },
                         {
                           "name": "HEKETI_FSTAB",
                           "value": "/var/lib/heketi/fstab"
                         },
                         {
                           "name": "HEKETI_SNAPSHOT_LIMIT",
                           "value": "14"
                         },
                         {
                           "name": "HEKETI_KUBE_GLUSTER_DAEMONSET",
                           "value": "y"
                         }
                       ],
                       "ports": [
                         {
                           "containerPort": 8080
                         }
                       ],
                       "volumeMounts": [
                         {
                           "mountPath": "/backupdb",
                           "name": "heketi-db-secret"
                         },
                         {
                           "name": "db",
                           "mountPath": "/var/lib/heketi"
                         },
                         {
                           "name": "config",
                           "mountPath": "/etc/heketi"
                         }
                       ],
                       "readinessProbe": {
                         "timeoutSeconds": 3,
                         "initialDelaySeconds": 3,
                         "httpGet": {
                           "path": "/hello",
                           "port": 8080
                         }
                       },
                       "livenessProbe": {
                         "timeoutSeconds": 3,
                         "initialDelaySeconds": 30,
                         "httpGet": {
                           "path": "/hello",
                           "port": 8080
                         }
                       }
                     }
                   ],
                   "volumes": [
                     {
                       "name": "db",
                       "glusterfs": {
                         "endpoints": "heketi-storage-endpoints",
                         "path": "heketidbstorage"
                       }
                     },
                     {
                       "name": "heketi-db-secret",
                       "secret": {
                         "secretName": "heketi-db-backup"
                       }
                     },
                     {
                       "name": "config",
                       "secret": {
                         "secretName": "heketi-config-secret"
                       }
                     }
                   ]
                 }
               }
             }
           }
         ]
       }
    path: /root/heketi-deployment.json
    permissions: '0755'

  - content: |
       {
         "kind": "List",
         "apiVersion": "v1",
         "items": [
           {
             "kind": "Service",
             "apiVersion": "v1",
             "metadata": {
               "name": "deploy-heketi",
               "labels": {
                 "glusterfs": "heketi-service",
                 "deploy-heketi": "support"
               },
               "annotations": {
                 "description": "Exposes Heketi Service"
               }
             },
             "spec": {
               "selector": {
                 "name": "deploy-heketi"
               },
               "ports": [
                 {
                   "name": "deploy-heketi",
                   "port": 8080,
                   "targetPort": 8080
                 }
               ]
             }
           },
           {
             "kind": "Deployment",
             "apiVersion": "extensions/v1beta1",
             "metadata": {
               "name": "deploy-heketi",
               "labels": {
                 "glusterfs": "heketi-deployment",
                 "deploy-heketi": "deployment"
               },
               "annotations": {
                 "description": "Defines how to deploy Heketi"
               }
             },
             "spec": {
               "replicas": 1,
               "template": {
                 "metadata": {
                   "name": "deploy-heketi",
                   "labels": {
                     "name": "deploy-heketi",
                     "glusterfs": "heketi-pod",
                     "deploy-heketi": "pod"
                   }
                 },
                 "spec": {
                   "serviceAccountName": "heketi-service-account",
                   "containers": [
                     {
                       "image": "heketi/heketi:8",
                       "imagePullPolicy": "Always",
                       "name": "deploy-heketi",
                       "env": [
                         {
                           "name": "HEKETI_EXECUTOR",
                           "value": "kubernetes"
                         },
                         {
                           "name": "HEKETI_FSTAB",
                           "value": "/var/lib/heketi/fstab"
                         },
                         {
                           "name": "HEKETI_SNAPSHOT_LIMIT",
                           "value": "14"
                         },
                         {
                           "name": "HEKETI_KUBE_GLUSTER_DAEMONSET",
                           "value": "y"
                         }
                       ],
                       "ports": [
                         {
                           "containerPort": 8080
                         }
                       ],
                       "volumeMounts": [
                         {
                           "name": "db",
                           "mountPath": "/var/lib/heketi"
                         },
                         {
                           "name": "config",
                           "mountPath": "/etc/heketi"
                         }
                       ],
                       "readinessProbe": {
                         "timeoutSeconds": 3,
                         "initialDelaySeconds": 3,
                         "httpGet": {
                           "path": "/hello",
                           "port": 8080
                         }
                       },
                       "livenessProbe": {
                         "timeoutSeconds": 3,
                         "initialDelaySeconds": 30,
                         "httpGet": {
                           "path": "/hello",
                           "port": 8080
                         }
                       }
                     }
                   ],
                   "volumes": [
                     {
                       "name": "db"
                     },
                     {
                       "name": "config",
                       "secret": {
                         "secretName": "heketi-config-secret"
                       }
                     }
                   ]
                 }
               }
             }
           }
         ]
       }
    path: /root/heketi-bootstrap.json
    permissions: '0755'

  - content: |
       {
         "clusters": [
           {
             "nodes": [
               {%- for host in nodes  %}
                  {
                    "node": {
                      "hostnames": {
                        "manage": [
                          "{{ host.Node }}"
                        ],
                        "storage": [
                          "{{ host.Address }}"
                        ]
                      },
                      "zone": 1
                    },
                    "devices": [
                      "/dev/vdb"
                    ]
                  }
                  {% if not loop.last %}
                     ,
                  {%endif%}
               {% endfor %}
             ]
           }
         ]
       }
    path: /usr/src/cloud/heketi-template.json.j2
    permissions: '0755'

  - content: |
       {
         "_port_comment": "Heketi Server Port Number",
         "port": "8080",
       
         "_use_auth": "Enable JWT authorization. Please enable for deployment",
         "use_auth": false,
       
         "_jwt": "Private keys for access",
         "jwt": {
           "_admin": "Admin has access to all APIs",
           "admin": {
             "key": "My Secret"
           },
           "_user": "User only has access to /volumes endpoint",
           "user": {
             "key": "My Secret"
           }
         },
       
         "_glusterfs_comment": "GlusterFS Configuration",
         "glusterfs": {
           "_executor_comment": "Execute plugin. Possible choices: mock, kubernetes, ssh",
           "executor": "kubernetes",
       
           "_db_comment": "Database file name",
           "db": "/var/lib/heketi/heketi.db",
       
           "kubeexec": {
             "rebalance_on_expansion": true
           },
       
           "sshexec": {
             "rebalance_on_expansion": true,
             "keyfile": "/etc/heketi/private_key",
             "fstab": "/etc/fstab",
             "port": "22",
             "user": "root",
             "sudo": false
           }
         },
       
         "_backup_db_to_kube_secret": "Backup the heketi database to a Kubernetes secret when running in Kubernetes. Default is off.",
         "backup_db_to_kube_secret": false
       }
    path: /root/heketi.json
    permissions: '0755'

  - content: |    
       {
         "kind": "DaemonSet",
         "apiVersion": "extensions/v1beta1",
         "metadata": {
             "name": "glusterfs",
             "labels": {
                 "glusterfs": "deployment"
             },
             "annotations": {
                 "description": "GlusterFS Daemon Set",
                 "tags": "glusterfs"
             }
         },
         "spec": {
             "template": {
                 "metadata": {
                     "name": "glusterfs",
                     "labels": {
                         "glusterfs-node": "daemonset"
                     }
                 },
                 "spec": {
                     "nodeSelector": {
                         "storagenode" : "glusterfs"
                     },
                     "hostNetwork": true,
                     "containers": [
                         {
                             "image": "gluster/gluster-centos:${heketi_glusterfs_container_version}",
                             "imagePullPolicy": "Always",
                             "name": "glusterfs",
                             "volumeMounts": [
                                 {
                                     "name": "glusterfs-heketi",
                                     "mountPath": "/var/lib/heketi"
                                 },
                                 {
                                     "name": "glusterfs-run",
                                     "mountPath": "/run"
                                 },
                                 {
                                     "name": "glusterfs-lvm",
                                     "mountPath": "/run/lvm"
                                 },
                                 {
                                     "name": "glusterfs-etc",
                                     "mountPath": "/etc/glusterfs"
                                 },
                                 {
                                     "name": "glusterfs-logs",
                                     "mountPath": "/var/log/glusterfs"
                                 },
                                 {
                                     "name": "glusterfs-config",
                                     "mountPath": "/var/lib/glusterd"
                                 },
                                 {
                                     "name": "glusterfs-dev",
                                     "mountPath": "/dev"
                                 },
                                 {
                                     "name": "glusterfs-cgroup",
                                     "mountPath": "/sys/fs/cgroup"
                                 }
                             ],
                             "securityContext": {
                                 "capabilities": {},
                                 "privileged": true
                             },
                             "readinessProbe": {
                                 "timeoutSeconds": 3,
                                 "initialDelaySeconds": 60,
                                 "exec": {
                                     "command": [
                                         "/bin/bash",
                                         "-c",
                                         "systemctl status glusterd.service"
                                     ]
                                 }
                             },
                             "livenessProbe": {
                                 "timeoutSeconds": 3,
                                 "initialDelaySeconds": 60,
                                 "exec": {
                                     "command": [
                                         "/bin/bash",
                                         "-c",
                                         "systemctl status glusterd.service"
                                     ]
                                 }
                             }
                         }
                     ],
                     "volumes": [
                         {
                             "name": "glusterfs-heketi",
                             "hostPath": {
                                 "path": "/var/lib/heketi"
                             }
                         },
                         {
                             "name": "glusterfs-run"
                         },
                         {
                             "name": "glusterfs-lvm",
                             "hostPath": {
                                 "path": "/run/lvm"
                             }
                         },
                         {
                             "name": "glusterfs-etc",
                             "hostPath": {
                                 "path": "/etc/glusterfs"
                             }
                         },
                         {
                             "name": "glusterfs-logs",
                             "hostPath": {
                                 "path": "/var/log/glusterfs"
                             }
                         },
                         {
                             "name": "glusterfs-config",
                             "hostPath": {
                                 "path": "/var/lib/glusterd"
                             }
                         },
                         {
                             "name": "glusterfs-dev",
                             "hostPath": {
                                 "path": "/dev"
                             }
                         },
                         {
                             "name": "glusterfs-cgroup",
                             "hostPath": {
                                 "path": "/sys/fs/cgroup"
                             }
                         }
                     ]
                 }
             }
          }
        }

    path: /root/glusterfs-daemonset.json
    permissions: '0755'

  - content: |
      - name: prepare consul
        hosts: 127.0.0.1
        pre_tasks:
          - name: stop consul
            service: name=consul state=stopped
          - name: clean /opt/consul/data/serf/local.keyring
            file: path=/opt/consul/data/serf/local.keyring state=absent
        roles:
          - role: entercloudsuite.consul
            consul_config_validate: "{{ consul_user_home }}/bin/consul validate -config-format=json %s"
            consul_configs:
              main:
                bind_addr: "{{ ansible_default_ipv4['address'] }}"
                client_addr: 0.0.0.0
                node_name: "{{ ansible_hostname }}"
                data_dir: "{{ consul_data_dir }}"
                encrypt: "${consul_encrypt}"
                datacenter: "${consul_datacenter}"
                enable_syslog: true
                server: false
                ui: true
                enable_script_checks: true
                services:
                  - name: "${name}"
                  - name: "exporter_node"
                    port: 9100
                rejoin_after_leave: true
                retry_join:
                  - "${consul}"
        post_tasks:
          - name: Get join token from Consul
            uri:
              url: "http://${consul}:${consul_port}/v1/kv/kubernetes/master/${kubernetes_master_name}/join_token"
              method: GET
              status_code: 200
              body_format: json
            register: joint_token_base64
          - name: decrypt jointoken
            shell: 'echo -n {{ joint_token_base64.json[0].Value | b64decode }}'
            register: command_output
          - set_fact:
              kubernetes_jointoken_decript: "{{ command_output.stdout }}"
          - debug: msg="{{kubernetes_jointoken_decript}}"

          - name: prepare configuration file
            template:
              src: /usr/src/cloud/bootstrap.sh.j2
              dest: /root/bootstrap.sh

          - name: bootstrap kubernetes
            shell: bash /root/bootstrap.sh
            register: bootstrap_kubernetes
            until: bootstrap_kubernetes.rc == 0
            delay: 1
            retries: 6000
          - name: set facts heketi_storageclass_arbiter heketi_storageclass_arbiter_average_file_size
            set_fact:
              heketi_storageclass_arbiter: ${heketi_storageclass_arbiter}
              heketi_storageclass_arbiter_average_file_size: ${heketi_storageclass_arbiter_average_file_size}

      - name: Heketi Installation
        hosts: 127.0.0.1
        post_tasks:
          - name: get from cosul
            uri:
              url: http://${consul}:${consul_port}/v1/catalog/service/kubernetes-heketi
              method: GET
              status_code: 200
              body_format: json
            register: url
            until:
              - ' url.json.__len__() >= ${heketi_count}'
            retries: 6000
          - debug:
              var: url.json.__len__()

          - name: bootstrap phase - create consul session
            uri:
              url: http://${consul}:${consul_port}/v1/session/create
              method: PUT
              status_code: 200
              body_format: json
            register: bootstrap_session_consul
            until: bootstrap_session_consul.failed == false
            delay: 1
            retries: 6000
          - set_fact:
              bootstrap_session: "{{ bootstrap_session_consul.json | json_query('ID') }}"
          - name: bootstrap phase - aquire consul lock
            uri:
              url: "http://${consul}:${consul_port}/v1/kv/heketi/master/${name}/custom_bootstrap?acquire={{ bootstrap_session }}"
              method: PUT
              status_code: 200
              body: '{ name: ${hostname}.node.${consul_datacenter}.consul }'
            register: bootstrap_consul
            until: bootstrap_consul.failed == false
            delay: 1
            retries: 6000
          - set_fact:
              bootstrap: "{{ bootstrap_consul.json | bool }}"
          - block:
              - name: generate ssh keys
                shell: ssh-keygen -b 2048 -t rsa -f /tmp/id_rsa -q -N "" -P ${heketi_admin_password}
                args:
                  creates: /tmp/id_rsa
              - name: put private ssh key in shared datastore
                uri:
                  url: "http://${consul}:${consul_port}/v1/kv/heketi/master/${name}/custom_ssh_key"
                  method: PUT
                  status_code: 200
                  body: "{{ lookup('file', '/tmp/id_rsa') }}"
                register: ssh_key_consul
                until: ssh_key_consul.failed == false
                delay: 1
                retries: 6000
              - name: put public ssh key
                uri:
                  url: "http://${consul}:${consul_port}/v1/kv/heketi/master/${name}/custom_ssh_key_pub"
                  method: PUT
                  status_code: 200
                  body: "{{ lookup('file', '/tmp/id_rsa.pub') }}"
                register: ssh_key_pub_consul
                until: ssh_key_pub_consul.failed == false
                delay: 1
                retries: 6000
              - name: remove keys from temp dir
                file:
                  path: "{{ item }}"
                  state: absent
                with_items:
                  - /tmp/id_rsa
                  - /tmp/id_rsa.pub
              - name: get encrypted kube config
                uri:
                  url: "http://${consul}:${consul_port}/v1/kv/kubernetes/master/kubernetes-master/kube_conf"
                  method: GET
                  status_code: 200
                  body_format: json
                register: kube_config_encrypt
                until: kube_config_encrypt.failed == false
                delay: 1
                retries: 6000


              - name: create directory .kube
                file: path=/root/.kube state=directory
              - name: decrypt kube_config
                shell: 'echo -n {{ kube_config_encrypt.json[0].Value | b64decode }} | openssl enc -d -base64 -A -aes-128-ctr -nopad -nosalt -k {{kubernetes_jointoken_decript}} > /root/.kube/config'

              - name: get from cosul
                uri:
                  url: http://${consul}:${consul_port}/v1/catalog/service/kubernetes-heketi
                  method: GET
                  status_code: 200
                  body_format: json
                register: url
              - set_fact:
                  consul_node: "{{ url.json | map(attribute='Node') | list }}"
              - debug: msg="{{consul_node}}"
              - name: Wait for nodes to be ready
                shell: "/usr/bin/kubectl get nodes {{ item }}"
                register: nodes
                until:
                  - '" Ready "  in nodes.stdout'
                with_items: "{{consul_node}}"
                retries: 6000
                delay: 2
              - name: wait 1 minutes
                pause:
                  minutes: 1
              # Create Namespace
              - name: create heketi Namespace
                shell: "/usr/bin/kubectl apply -f /root/heketi-namespace.json"
                ignore_errors: yes

              - name: register heketi nodes
                shell: "/usr/bin/kubectl get nodes | sed -n '1!p' | awk '{print $1}' | grep ${name}"
                register: command_output
              - debug: msg="{{command_output.stdout}}"
              - set_fact:
                  heketi_node: "{{command_output.stdout.split()}}"
              - debug: msg="{{heketi_node}}"
              # Create Daemon Set
              - name: create heketi-service-account
                shell: "kubectl apply -n ${heketi_namespace} -f /root/glusterfs-daemonset.json"
                ignore_errors: yes
              # Tag heketi nodes
              - name: set storagenode=glusterfs label to heketi node
                command: "/usr/bin/kubectl label node {{ item }} storagenode=glusterfs"
                with_items: "{{heketi_node}}"
                ignore_errors: yes
              # wait untill all posd are start -->
              - set_fact:
                  heketi_number_node: "{{ heketi_node | length }}"
              - debug: msg=" Number of nodes {{ heketi_number_node }}"
              - name: Wait until all pod will be created
                shell: "/usr/bin/kubectl get pods -n ${heketi_namespace} --selector=glusterfs-node=daemonset | sed -n '1!p' | wc -l"
                register: pod_start
                until:
                  - 'pod_start >= heketi_number_node'
                retries: 6000
                delay: 2
                # wait unti all pode are up and running
                # Register pod name
              - name: Wait until all pod will be created
                shell: "/usr/bin/kubectl get pods -n ${heketi_namespace} --selector=glusterfs-node=daemonset | sed -n '1!p' | awk '{print $1}'"
                register: command_output
              - debug: msg="{{command_output.stdout}}"
              - set_fact:
                  list_gluster_pod_name: "{{command_output.stdout.split()}}"
              - debug: msg="{{list_gluster_pod_name}}"
              - name: Wait for pod to be ready and running
                shell: "/usr/bin/kubectl get -n ${heketi_namespace} pods {{ item }}"
                register: pods_status
                until:
                  - '" Running "  in pods_status.stdout'
                  - '" 1/1 "  in pods_status.stdout'
                with_items: "{{list_gluster_pod_name}}"
                retries: 200
                delay: 2
              # ALL POD ARE UP AND RUNNING <-------------
               # Create service account
              - name: create service account
                command: "/usr/bin/kubectl apply -n ${heketi_namespace} -f /root/heketi-service-account.json"
                ignore_errors: yes
              # Create clusterrolebinding
              - name: create Cluster Role Binding
                command: "kubectl create -n ${heketi_namespace} clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=${heketi_namespace}:heketi-service-account"
                ignore_errors: yes
              # Allow Heketi to control GlusterFS pods
              - name: Create secret for Heketi
                command: "kubectl create -n ${heketi_namespace} secret generic heketi-config-secret --from-file=/root/heketi.json"
                ignore_errors: yes
              # Start Heketi BoostrapPod
              - name: Create Heketi Boostrap container
                command: "kubectl apply -n ${heketi_namespace} -f /root/heketi-bootstrap.json"
                ignore_errors: yes
              # Install Heketi Release
              - name: download heketi tarball
                get_url:
                  url: https://github.com/heketi/heketi/releases/download/v8.0.0/heketi-client-v8.0.0.linux.amd64.tar.gz
                  dest: /tmp/
                register: heketi_compressed_download
              - name: set up prometheus_exporter_dir_name variable
                set_fact: 
                  heketi_heketi_dir_name: "{{ heketi_compressed_download.dest.split('/')[-1].replace('.tar.gz','') }}"
              - name: debug
                debug:
                  var: heketi_heketi_dir_name
              - name: unarchive binary tarball
                unarchive:
                  remote_src: yes
                  src: "/tmp/{{ heketi_heketi_dir_name }}.tar.gz"
                  dest: "/usr/src/cloud/"
              # DEPLOY TOPOLOGY for Heketi
              - name: get from cosul
                uri:
                  url: http://${consul}:${consul_port}/v1/catalog/service/kubernetes-heketi
                  method: GET
                  status_code: 200
                  body_format: json
                register: url
              - set_fact:
                  nodes: "{{ url.json }}"
              - template:
                  src: /usr/src/cloud/heketi-template.json.j2
                  dest: /tmp/heketi-template.json
              - name: Check Heketi Deploy is up and running
                shell: "/usr/bin/kubectl get pods -n ${heketi_namespace} --selector=name=deploy-heketi | sed -n '1!p' |awk '{print $1}'"
                register: command_output
              - debug: msg="{{command_output.stdout}}"
              - set_fact:
                  pod_list: "{{command_output.stdout.split()}}"
              - set_fact:
                  heketi_deploy_pod: "{{command_output.stdout.split()}}"
              - debug: msg="{{pod_list}}"
              - name: Wait for pod to be ready and running
                shell: "/usr/bin/kubectl get pods -n ${heketi_namespace} {{ item }}"
                register: pods_status
                until:
                  - '" Running "  in pods_status.stdout'
                  - '" 1/1 "  in pods_status.stdout'
                with_items: "{{pod_list}}"
                retries: 6000
                delay: 2
              - debug: msg="{{pod_list}}"
              - name: Get heketi service IP
                shell: "/usr/bin/kubectl get -n ${heketi_namespace} services deploy-heketi | sed -n '1!p' | awk '{print $3}'"
                register: command_output
              - debug: msg="{{command_output.stdout}}"
              - set_fact:
                  heketi_deploy_service_ip: "{{command_output.stdout}}"
              - debug: msg="{{heketi_deploy_service_ip}}"
              - name: get hello from heketi
                uri:
                  url: http://{{heketi_deploy_service_ip}}:8080/hello
                  method: GET
                  status_code: 200
                register: url
              - debug: msg="{{url}}"
              - name: deploy heketi topology
                shell: "/usr/src/cloud/heketi-client/bin/heketi-cli -s http://{{heketi_deploy_service_ip}}:8080 topology load --json=/tmp/heketi-template.json"
                register: command_output
              - debug: msg="{{command_output}}"
              - name:  heketi database heketi volume for save database ( setup-openshift-heketi-storage )
                shell: "/usr/src/cloud/heketi-client/bin/heketi-cli -s http://{{heketi_deploy_service_ip}}:8080 setup-openshift-heketi-storage"
                register: command_output
              - debug: msg="{{command_output}}"
              - name: wait 30 seconds
                pause:
                  seconds: 30
              - name: cleanup all heketi deploiment 
                shell: "kubectl create -n ${heketi_namespace} -f /usr/src/cloud/heketi-storage.json"
                register: command_output
              - debug: msg="{{command_output}}"
              - name: wait 30 seconds
                pause:
                  seconds: 30
              - name: get status of jobs
                shell: "/usr/bin/kubectl get -n ${heketi_namespace} jobs"
                register: command_output
              - debug: msg="{{command_output}}"
              - name: cleanup all heketi deploiment 
                shell: "/usr/bin/kubectl delete -n ${heketi_namespace} all,service,jobs,deployment,secret --selector=deploy-heketi"
                register: command_output
              - debug: msg="{{command_output}}"
              - name: create Heketi Long term Container and service
                shell: "/usr/bin/kubectl apply -n ${heketi_namespace} -f /root/heketi-deployment.json"
                ignore_errors: yes
                register: command_output
              - debug: msg="{{command_output}}"
              # Wait until Heketi log-term container is up and running
              - name: Wait for pod to be ready and running
                shell: "/usr/bin/kubectl get pods -n ${heketi_namespace} --selector=glusterfs=heketi-pod,name=heketi"
                register: pods_status
                until:
                  - '" Running "  in pods_status.stdout'
                  - '" 1/1 "  in pods_status.stdout'
                with_items: "{{list_gluster_pod_name}}"
                retries: 200
                delay: 2
              - name: get Heketi service Endpoint
                shell: "/usr/bin/kubectl get -n ${heketi_namespace} svc heketi | sed -n '1!p' | awk '{print $3}'"
                ignore_errors: yes
                register: command_output
              - debug: msg="{{command_output}}"
              - set_fact: 
                  heketi_end_service_ip: "{{command_output.stdout}}"
              - debug: msg="{{heketi_end_service_ip}}"
              - name: Get Heket cluster list
                shell: "/usr/src/cloud/heketi-client/bin/heketi-cli -s http://{{heketi_end_service_ip}}:8080 cluster list"
                register: command_output
              - debug: msg="{{command_output}}"
              - name: create heketi-storageclasses tempalte
                template:
                  src: /usr/src/cloud/heketi-storageclasses.yaml.j2
                  dest: /tmp/heketi-storageclasses.yaml
              - name: deploy heketi storage class
                shell: "/usr/bin/kubectl apply -n ${heketi_namespace} -f /tmp/heketi-storageclasses.yaml"
                ignore_errors: yes
                register: command_output
              - debug: msg="{{command_output}}"
                
            when: bootstrap == true

          - name: get private ssh key
            uri:
              url: http://${consul}:${consul_port}/v1/kv/heketi/master/${name}/custom_ssh_key
              method: GET
              status_code: 200
              body_format: json
            register: ssh_key_consul
            until: ssh_key_consul.failed == false
            delay: 1
            retries: 6000
          - name: write private encrypted ssh key
            copy:
              content: "{{ ssh_key_consul.json[0] | json_query('Value') | b64decode }}"
              dest: /root/.ssh/id_rsa.enc
              mode: 0400
          - name: decrypt ssh keys
            shell: openssl rsa -in /root/.ssh/id_rsa.enc -out /root/.ssh/id_rsa -passin pass:${heketi_admin_password} && chmod 400 /root/.ssh/id_rsa
            args:
              creates: /root/.ssh/id_rsa
          - name: get public ssh key
            uri:
              url: http://${consul}:${consul_port}/v1/kv/heketi/master/${name}/custom_ssh_key_pub
              method: GET
              status_code: 200
              body_format: json
            register: ssh_key_pub_consul
            until: ssh_key_pub_consul.failed == false
            delay: 1
            retries: 6000
          - name: write public ssh key
            copy:
              content: "{{ ssh_key_pub_consul.json[0] | json_query('Value') | b64decode }}"
              dest: /root/.ssh/id_rsa.pub
              mode: 0400
          - name: enable ssh key for direct root access
            authorized_key:
              user: root
              key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
    path: /usr/src/cloud/playbook.yml
    permissions: '0755'

runcmd:
  #- rm /root/bootstrap.sh
  - |
      bash <<'EOF'
      export COMPLETED=false
      while [ "$COMPLETED" == "false" ]; do
        (
          apt-get update || true
          apt-get install python-pip -y || true
          set -e errexit
          set -o pipefail
          # workaround https://github.com/ansible/ansible/issues/21562
          export HOME=/root
          cd /usr/src/cloud
          source venv/bin/activate
          ansible-playbook -e ansible_python_interpreter=/usr/bin/python --connection=local playbook.yml
        ) >> /var/log/cloud-scripts.log 2>&1
        if [ $? == 0 ]; then
          COMPLETED=true
        fi
        sleep 1
      done
      EOF

final_message: "Kubernetes worker is ready to use"
